import java.util.*;
public class GroceryStore {
    private ArrayList<Product> products;
    private ArrayList<Sale> sales;

    public GroceryStore() {
        products = new ArrayList<Product>();
        sales = new ArrayList<Sale>();
    }

    public void addSale(Sale sale) {
        sales.add(sale);
    }
    
    public ArrayList<Product> getProducts() {
        return products;
    }

    public ArrayList<Sale> getSales() {
        return sales;
    }

    //Method to add products.
    public void addProduct(Product p){
        products.add(p);
    }
    //Method to remove products.
    public void removeProduct(Product product) {
        products.remove(product);
    }
    //Method to search for a product.
    //Change return type to Product.
    //Use Map to find to product: key: Product ID, value: Product value
    public boolean searchProduct(String name){
        for(int i = 0; i < getProducts().size(); i++){
            if(getProducts().get(i).getName().equals(name))
                return true;         
        }
        return false;
    }
    //Shows all the products available.
    public void showProducts(){
        for(int i = 0; i < getProducts().size(); i++){
            System.out.println(getProducts().get(i).toString());
        }
    }
    public void updateInventoryLevels(Sale sale) {
        ArrayList<Product> soldItems = sale.getItemsInCart();
        for (Product product : soldItems) { 
            for (Product inventoryProduct : products) {
                if (inventoryProduct.getName().equals(product.getName())) {
                    //update inventory count by subtracting quantity sold
                    int currentInventory = inventoryProduct.getInventory_count();
                    int itemsSold = 0;                    
                    for (Product item : soldItems) {
                        if (item.getName().equals(product.getName())) {
                            itemsSold++;
                        }
                    }
                    int newInventoryCount = currentInventory - itemsSold;
                    inventoryProduct.setInventory_count(newInventoryCount);
                }
            }
        }
    }
}


